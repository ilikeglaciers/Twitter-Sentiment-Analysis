# -*- coding: utf-8 -*-
"""Project_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Xh0mTuRd5kqq0Rtt17A3Mzgyz2vpLW5d

# Project 1

First project will be related to Twitter Sentiment Analysis which predicts the nature of a tweet whether it could be positive, negative or neutral.

Installing kaggle file
"""

pip install kaggle

"""**Uploading your kaggle.json file (api token)**"""

#updating the path for kaggle.json file
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

"""**Importing the Twitter Dataset**"""

#API to fetch the dataset
!kaggle datasets download -d kazanova/sentiment140

#extracting the ZIP file
from zipfile import ZipFile
pathZip = '/content/sentiment140.zip'

with ZipFile(pathZip,'r') as zip:
  zip.extractall()
  print("The entire data has been extracted.")

"""**Importing the dependencies**"""

import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk
nltk.download('stopwords')

#printing the stopwords
print(stopwords.words('english'))

"""**Data Processing**"""

# loading the data from csv file using pandas
twt_data = pd.read_csv('/content/training.1600000.processed.noemoticon.csv',encoding = 'ISO-8859-1')

#checking the number of rows and columns
twt_data.shape

#printing the first five rows of the dataframe
twt_data.head()

#naming the columns and reading the dataset
column_names = ['target','id','date','flag','user','text']
twt_data = pd.read_csv('/content/training.1600000.processed.noemoticon.csv',encoding = 'ISO-8859-1',names = column_names)

twt_data.shape

#counting the number of missing values in the dataset
twt_data.isnull().sum()

#checking the distribution of the target column
twt_data['target'].value_counts()

"""**Convert the target 4 to 1**"""

twt_data.replace({'target':{4:1}},inplace=True)

twt_data.value_counts('target')

"""0 --> Negative Tweet

1 --> Positive Tweet

**Stemming**
"""

port_stem = PorterStemmer()

def stemming(content):

  stemmed_content = re.sub('[^a-zA-Z]',' ',content)
  stemmed_content = stemmed_content.lower()
  stemmed_content = stemmed_content.split()
  stemmed_content = [port_stem.stem(word)for word in stemmed_content if not word in stopwords.words('english')]
  stemmed_content = ' '.join(stemmed_content)

  return stemmed_content

twt_data['stemmed_content'] = twt_data['text'].apply(stemming)

twt_data.head()
#new column appears, take a look!

print(twt_data['stemmed_content'])

print(twt_data['target'])

#separating the data and label

X = twt_data['stemmed_content'].values
Y = twt_data['target'].values

print(X)

print(Y)

"""**Splitting the data into training and testing data**"""

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

print(X_train)

print(X_test)

"""**Converting data into numerical form**"""

vectorizer = TfidfVectorizer()
X_train = vectorizer.fit_transform(X_train)
X_test = vectorizer.transform(X_test)

print(X_train)

print(X_test)

"""**Machine Learning model**

**Training the logistic regression model**
"""

model = LogisticRegression(max_iter=1000)

model.fit(X_train,Y_train)

"""**Model Evaluation**

**Accuracy Score**
"""

#accuracy score on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(Y_train,X_train_prediction)

print('Accuracy score on the training data:',training_data_accuracy)

#accuracy score on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(Y_test,X_test_prediction)

print('Accuracy score of test data:',test_data_accuracy)

"""**Saving the trained model**"""

import pickle

filename = 'trained_model.sav'
pickle.dump(model,open(filename,'wb'))

"""**Using saved model for future predictions**"""

#loading the saved model
loaded_model = pickle.load(open('/content/trained_model.sav','rb'))

X_new=X_test[200]
print(Y_test[200])
#the acutal data information

prediction = model.predict(X_new)
print(prediction)
#value predicted by the model

if(prediction[0]==0):
  print('negative tweet')
else:
  print('positive tweet')

def func(message):
  message = stemming(message)
  message = vectorizer.transform([message])
  prediction = model.predict(message)
  if(prediction[0]==0):
    print('negative tweet')
  else:
    print('positive tweet')

var = input('Enter the message:')
func(var)

